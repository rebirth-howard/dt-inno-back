-- 외래 키 제약 조건 제거
SET @foreign_key = (
    SELECT CONSTRAINT_NAME
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE TABLE_NAME = 'USER_ROLE' AND TABLE_SCHEMA = DATABASE() AND COLUMN_NAME = 'USER_ID'
);
SET @sql = IF(@foreign_key IS NOT NULL, CONCAT('ALTER TABLE USER_ROLE DROP FOREIGN KEY ', @foreign_key), 'SELECT "Foreign Key USER_ROLE_USER does not exist"');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @foreign_key = (
    SELECT CONSTRAINT_NAME
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE TABLE_NAME = 'USER_ROLE' AND TABLE_SCHEMA = DATABASE() AND COLUMN_NAME = 'ROLE_ID'
);
SET @sql = IF(@foreign_key IS NOT NULL, CONCAT('ALTER TABLE USER_ROLE DROP FOREIGN KEY ', @foreign_key), 'SELECT "Foreign Key USER_ROLE_ROLE does not exist"');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @foreign_key = (
    SELECT CONSTRAINT_NAME
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE TABLE_NAME = 'ROLE_PRIVILEGE' AND TABLE_SCHEMA = DATABASE() AND COLUMN_NAME = 'ROLE_ID'
);
SET @sql = IF(@foreign_key IS NOT NULL, CONCAT('ALTER TABLE ROLE_PRIVILEGE DROP FOREIGN KEY ', @foreign_key), 'SELECT "Foreign Key ROLE_PRIVILEGE_ROLE does not exist"');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @foreign_key = (
    SELECT CONSTRAINT_NAME
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE TABLE_NAME = 'ROLE_PRIVILEGE' AND TABLE_SCHEMA = DATABASE() AND COLUMN_NAME = 'PRIVILEGE_ID'
);
SET @sql = IF(@foreign_key IS NOT NULL, CONCAT('ALTER TABLE ROLE_PRIVILEGE DROP FOREIGN KEY ', @foreign_key), 'SELECT "Foreign Key ROLE_PRIVILEGE_PRIVILEGE does not exist"');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- 기존 테이블 삭제
SET @table_name = (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'USER' AND TABLE_SCHEMA = DATABASE());
SET @sql = IF(@table_name IS NOT NULL, 'DROP TABLE USER', 'SELECT "Table USER does not exist"');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @table_name = (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'ROLE' AND TABLE_SCHEMA = DATABASE());
SET @sql = IF(@table_name IS NOT NULL, 'DROP TABLE ROLE', 'SELECT "Table ROLE does not exist"');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @table_name = (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PRIVILEGE' AND TABLE_SCHEMA = DATABASE());
SET @sql = IF(@table_name IS NOT NULL, 'DROP TABLE PRIVILEGE', 'SELECT "Table PRIVILEGE does not exist"');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @table_name = (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'USER_ROLE' AND TABLE_SCHEMA = DATABASE());
SET @sql = IF(@table_name IS NOT NULL, 'DROP TABLE USER_ROLE', 'SELECT "Table USER_ROLE does not exist"');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @table_name = (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'ROLE_PRIVILEGE' AND TABLE_SCHEMA = DATABASE());
SET @sql = IF(@table_name IS NOT NULL, 'DROP TABLE ROLE_PRIVILEGE', 'SELECT "Table ROLE_PRIVILEGE does not exist"');
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;


-- 사용자 테이블
CREATE TABLE USER (
    ID CHAR(36) PRIMARY KEY COMMENT '사용자 ID (UUID)',
    LOGIN_ID VARCHAR(50) NOT NULL UNIQUE COMMENT '로그인 ID',
    USERNAME VARCHAR(50) NOT NULL COMMENT '사용자 이름',
    PASSWORD VARCHAR(255) NOT NULL COMMENT '비밀번호',
    EMAIL VARCHAR(100) NOT NULL UNIQUE COMMENT '이메일 주소',
    STATUS ENUM('UNAPPROVED', 'UNDER_REVIEW', 'REVIEW_REJECTED', 'APPROVED', 'SUSPENDED', 'PENDING_WITHDRAWAL', 'WITHDRAWN')
        NOT NULL COMMENT '승인 상태 (미승인, 심사중, 심사반려, 승인, 활동정지, 탈퇴예정, 탈퇴확정)',
    CREATED_BY VARCHAR(50) NOT NULL COMMENT '생성자',
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '생성일',
    UPDATED_BY VARCHAR(50) NOT NULL COMMENT '수정자',
    UPDATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '수정일',
    UNIQUE INDEX IDX_USER_LOGIN_ID (LOGIN_ID),  -- 로그인 ID 유니크 인덱스
    INDEX IDX_USER_LOGIN_PASSWORD (LOGIN_ID, PASSWORD),  -- 로그인 ID와 비밀번호를 포함한 복합 인덱스
    INDEX IDX_USER_LOGIN_STATUS (LOGIN_ID, STATUS)  -- 로그인 ID와 승인 상태를 포함한 복합 인덱스
);

-- Role 테이블
CREATE TABLE ROLE (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY COMMENT 'Role ID',
    ROLE_NAME VARCHAR(50) NOT NULL UNIQUE COMMENT 'Role 이름',
    CREATED_BY VARCHAR(50) NOT NULL COMMENT '생성자',
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '생성일',
    UPDATED_BY VARCHAR(50) NOT NULL COMMENT '수정자',
    UPDATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '수정일',
    INDEX IDX_ROLE_NAME (ROLE_NAME)  -- Role 이름 인덱스
);

-- Privilege 테이블
CREATE TABLE PRIVILEGE (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY COMMENT 'Privilege ID',
    PRIVILEGE_NAME VARCHAR(100) NOT NULL UNIQUE COMMENT 'Privilege 이름',
    CREATED_BY VARCHAR(50) NOT NULL COMMENT '생성자',
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '생성일',
    UPDATED_BY VARCHAR(50) NOT NULL COMMENT '수정자',
    UPDATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '수정일',
    INDEX IDX_PRIVILEGE_NAME (PRIVILEGE_NAME)  -- Privilege 이름 인덱스
);

-- 사용자 Role 매핑 테이블
CREATE TABLE USER_ROLE (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY COMMENT '사용자 Role 매핑 ID',
    USER_ID CHAR(36) COMMENT '사용자 ID',
    ROLE_ID BIGINT COMMENT 'Role ID',
    CREATED_BY VARCHAR(50) NOT NULL COMMENT '생성자',
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '생성일',
    CONSTRAINT FK_USER_ROLE_USER FOREIGN KEY (USER_ID) REFERENCES USER(ID) ON DELETE CASCADE,
    CONSTRAINT FK_USER_ROLE_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID) ON DELETE RESTRICT,
    INDEX IDX_USER_ROLE_USER_ID (USER_ID),  -- 사용자 ID 인덱스
    INDEX IDX_USER_ROLE_ROLE_ID (ROLE_ID)  -- Role ID 인덱스
);

-- Role Privilege 매핑 테이블
CREATE TABLE ROLE_PRIVILEGE (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY COMMENT 'Role Privilege 매핑 ID',
    ROLE_ID BIGINT COMMENT 'Role ID',
    PRIVILEGE_ID BIGINT COMMENT 'Privilege ID',
    CREATED_BY VARCHAR(50) NOT NULL COMMENT '생성자',
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '생성일',
    CONSTRAINT FK_ROLE_PRIVILEGE_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID) ON DELETE RESTRICT,
    CONSTRAINT FK_ROLE_PRIVILEGE_PRIVILEGE FOREIGN KEY (PRIVILEGE_ID) REFERENCES PRIVILEGE(ID) ON DELETE RESTRICT,
    INDEX IDX_ROLE_PRIVILEGE_ROLE_ID (ROLE_ID),  -- Role ID 인덱스
    INDEX IDX_ROLE_PRIVILEGE_PRIVILEGE_ID (PRIVILEGE_ID)  -- Privilege ID 인덱스
);


-- 관계 설명:
-- 1. USER가 삭제될 때 USER_ROLE 매핑 데이터는 자동으로 삭제됩니다 (ON DELETE CASCADE).
-- 2. ROLE이 삭제될 때 USER_ROLE 또는 ROLE_PRIVILEGE 매핑 데이터가 존재하면 ROLE 삭제가 제한됩니다 (ON DELETE RESTRICT).
-- 3. PRIVILEGE가 삭제될 때 ROLE_PRIVILEGE 매핑 데이터가 존재하면 PRIVILEGE 삭제가 제한됩니다 (ON DELETE RESTRICT).

-- ROLE 데이터 생성
INSERT INTO ROLE (ROLE_NAME, CREATED_BY, UPDATED_BY) VALUES ('임시회원', 'system', 'system');
INSERT INTO ROLE (ROLE_NAME, CREATED_BY, UPDATED_BY) VALUES ('일반유저', 'system', 'system');
INSERT INTO ROLE (ROLE_NAME, CREATED_BY, UPDATED_BY) VALUES ('보험사유저', 'system', 'system');
INSERT INTO ROLE (ROLE_NAME, CREATED_BY, UPDATED_BY) VALUES ('재고관리유저', 'system', 'system');
INSERT INTO ROLE (ROLE_NAME, CREATED_BY, UPDATED_BY) VALUES ('플랫폼관리자유저', 'system', 'system');


-- PRIVILEGE 데이터 생성
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('경매 보기', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('부품 구매', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('주문 내역 확인', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('개인 정보 수정', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('보험 계약 관리', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('손해 사정 정보 열람', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('재고 현황 보기', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('재고 추가 및 수정', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('사용자 관리', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('경매 생성 및 수정', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('전체 주문 관리', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('권한 부여 및 Role 관리', 'system', 'system');
INSERT INTO PRIVILEGE (PRIVILEGE_NAME, CREATED_BY, UPDATED_BY) VALUES ('시스템 설정 수정', 'system', 'system');


-- USER 테이블에 대한 데이터 생성
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_normal', '일반', 'password', 'user_normal@example.com', 'system', 'system', 'APPROVED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_ins', '일반-보험사', 'password', 'user_ins@example.com', 'system', 'system', 'APPROVED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_inv', '일반-재고관리', 'password', 'user_inv@example.com', 'system', 'system', 'APPROVED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_admin', '일반-관리자', 'password', 'user_admin@example.com', 'system', 'system', 'APPROVED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_ins_admin', '일반-보험-관리자', 'password', 'user_ins_admin@example.com', 'system', 'system', 'APPROVED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_inv_admin', '일반-재고-관리자', 'password', 'user_inv_admin@example.com', 'system', 'system', 'APPROVED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_insv_admin', '일반-보험-재고-관리자', 'password', 'user_insv_admin@example.com', 'system', 'system', 'APPROVED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_temp', '임시유저', 'password', 'user_temp@example.com', 'system', 'system', 'UNAPPROVED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_audit', '심사중유저', 'password', 'user_audit@example.com', 'system', 'system', 'UNDER_REVIEW');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_turn', '반려유저', 'password', 'user_turn@example.com', 'system', 'system', 'REVIEW_REJECTED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_stop', '활동정지유저', 'password', 'user_stop@example.com', 'system', 'system', 'SUSPENDED');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_withdraw_p', '탈퇴예정유저', 'password', 'user_withdraw_p@example.com', 'system', 'system', 'PENDING_WITHDRAWAL');
INSERT INTO USER (ID, LOGIN_ID, USERNAME, PASSWORD, EMAIL, CREATED_BY, UPDATED_BY, STATUS) VALUES (UUID(), 'user_withdraw_c', '탈퇴확정유저', 'password', 'user_withdraw_c@example.com', 'system', 'system', 'WITHDRAWN');


-- ROLE_PRIVILEGE 데이터 생성
-- 일반유저 권한
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (2, 1, 'system'); -- 경매 보기
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (2, 2, 'system'); -- 부품 구매
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (2, 3, 'system'); -- 주문 내역 확인
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (2, 4, 'system'); -- 개인 정보 수정

-- 보험사유저 권한
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (3, 1, 'system'); -- 경매 보기
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (3, 5, 'system'); -- 보험 계약 관리
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (3, 6, 'system'); -- 손해 사정 정보 열람
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (3, 2, 'system'); -- 부품 구매

-- 재고관리유저 권한
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (4, 7, 'system'); -- 재고 현황 보기
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) VALUES (4, 8, 'system'); -- 재고 추가 및 수정

-- 플랫폼관리자유저 권한 (모든 권한 부여)
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID, CREATED_BY) SELECT 5, ID, 'system' FROM PRIVILEGE;

-- USER_ROLE 데이터 생성
-- user_temp Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_temp'), 1, 'system'); -- 임시회원

-- user_audit Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_audit'), 1, 'system'); -- 임시회원

-- user_turn Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_turn'), 1, 'system'); -- 임시회원

-- user_stop Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_stop'), 1, 'system'); -- 임시회원

-- user_withdraw_p Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_withdraw_p'), 1, 'system'); -- 임시회원

-- user_withdraw_c Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_withdraw_c'), 1, 'system'); -- 임시회원

-- user_normal Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_normal'), 1, 'system'); -- 임시회원
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_normal'), 2, 'system'); -- 일반유저

-- user_admin Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_admin'), 1, 'system'); -- 임시회원
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_admin'), 2, 'system'); -- 일반유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_admin'), 5, 'system'); -- 플랫폼관리자유저

-- user_ins Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_ins'), 1, 'system'); -- 임시회원
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_ins'), 2, 'system'); -- 일반유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_ins'), 3, 'system'); -- 보험사유저

-- user_inv Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_inv'), 1, 'system'); -- 임시회원
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_inv'), 2, 'system'); -- 일반유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_inv'), 4, 'system'); -- 재고관리유저

-- user_ins_admin Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_ins_admin'), 1, 'system'); -- 임시회원
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_ins_admin'), 2, 'system'); -- 일반유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_ins_admin'), 3, 'system'); -- 보험사유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_ins_admin'), 5, 'system'); -- 플랫폼관리자유저

-- user_inv_admin Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_inv_admin'), 1, 'system'); -- 임시회원
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_inv_admin'), 2, 'system'); -- 일반유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_inv_admin'), 4, 'system'); -- 재고관리유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_inv_admin'), 5, 'system'); -- 플랫폼관리자유저

-- user_insv_admin Role 부여
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_insv_admin'), 1, 'system'); -- 임시회원
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_insv_admin'), 2, 'system'); -- 일반유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_insv_admin'), 3, 'system'); -- 보험사유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_insv_admin'), 4, 'system'); -- 재고관리유저
INSERT INTO USER_ROLE (USER_ID, ROLE_ID, CREATED_BY) VALUES ((SELECT ID FROM USER WHERE LOGIN_ID = 'user_insv_admin'), 5, 'system'); -- 플랫폼관리자유저
